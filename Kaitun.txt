if not game:IsLoaded() then repeat game.Loaded:Wait() until game:IsLoaded() end

getgenv().Config = getgenv().Config or {
    ["Main"] = {
       
    },
    ["Process"] = {
        ["Force Staying In Second Sea Until Have Dark Fragments"] = true,
        ["Soul Guitar Quest"] = true,
        ["Cursed Dual Katana Quest"] = true,
        ["Auto Fully Mirror Fragtal"] = true,
        ["Purchase Hidden Sword"] = true,
        ["Purchase Legend Haki Color"] = true,
        ["Max Fragments To Raid"] = {2000, 7500}, -- just effect if player level isnt max / first arg: sea 2, sec arg: sea 3
        ["Fruit Hop"] =
        {
            ["Enable"] = true,
            ["Delay Per Server"] = 60
        }
    },
    ["Demon Fruit"] = {
        ["Sniping Fruit"] = {
            'Dough-Dough'
        }, --Fruit to snipe when it on stock
        ["Only Eat Awakenable Fruit"] = true,
        ["Lock Fruit"] = {"Kitsune-Kitsune"}
    },
    ["Farming"] = {
        ["Type Of Farming When Done All Tasks"] = "Custom Script", -- Custom Script / Nearby Farm /
        ["Custom Script"] = ""
    },
    ["Utilly"] = {
        ["White Screen"] = false,
        ["Auto Add Friends / Accept Requests"] = false,
        ["Anti Flagging"] = true,
        ["Auto Hop If There Are Nearby Player When Level Farming"] = true,
        ["Enable Ui"] = true
    }
}


function c()
            return getgenv().Config
         end








local BlackListLocation = {}
function CheckNearestTeleporter(vcs)
    vcspos = vcs.Position
    min = math.huge
    min2 = math.huge
    local placeId = game.PlaceId
    if placeId == 2753915549 then
        OldWorld = true
    elseif placeId == 4442272183 then
        NewWorld = true
    elseif placeId == 7449423635 then
        ThreeWorld = true
    end
    local chooseis
    if ThreeWorld then
        TableLocations = {
            ["Caslte On The Sea"] = Vector3.new(-5058.77490234375, 314.5155029296875, -3155.88330078125),
            ["Hydra"] = Vector3.new(5756.83740234375, 610.4240112304688, -253.9253692626953),
            ["Mansion"] = Vector3.new(-12463.8740234375, 374.9144592285156, -7523.77392578125),
            ["Great Tree"] = Vector3.new(28282.5703125, 14896.8505859375, 105.1042709350586),
            ["Ngu1"] = Vector3.new(-11993.580078125, 334.7812805175781, -8844.1826171875),
            ["ngu2"] = Vector3.new(5314.58203125, 25.419387817382812, -125.94227600097656),
            ["Temple Of Time"] = Vector3.new(2957.833740234375, 2286.495361328125, -7217.05078125)
        }
    elseif NewWorld then
        TableLocations = {
            ["Mansion"] = Vector3.new(-288.46246337890625, 306.130615234375, 597.9988403320312),
            ["Flamingo"] = Vector3.new(2284.912109375, 15.152046203613281, 905.48291015625),
            ["122"] = Vector3.new(923.21252441406, 126.9760055542, 32852.83203125),
            ["3032"] = Vector3.new(-6508.5581054688, 89.034996032715, -132.83953857422)
        }
    elseif OldWorld then
        TableLocations = {
            ["1"] = Vector3.new(-7894.6201171875, 5545.49169921875, -380.2467346191406),
            ["2"] = Vector3.new(-4607.82275390625, 872.5422973632812, -1667.556884765625),
            ["3"] = Vector3.new(61163.8515625, 11.759522438049316, 1819.7841796875),
            ["4"] = Vector3.new(3876.280517578125, 35.10614013671875, -1939.3201904296875)
        }
    end
    local mmbb = {}
    for i2, v2 in pairs(TableLocations) do
        if not table.find(BlackListLocation, i2) then
            mmbb[i2] = v2
        end
    end
    local TableLocations = mmbb
    local TableLocations2 = {}
    for i, v in pairs(TableLocations) do
        if typeof(v) ~= "table" then
            TableLocations2[i] = (v - vcspos).Magnitude
        else
            TableLocations2[i] = (v["POS"] - vcspos).Magnitude
        end
    end
    for i, v in pairs(TableLocations2) do
        if v < min then
            min = v
            min2 = v
            choose = TableLocations[i]
            chooseis = i
        end
    end
    min3 = (vcspos - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
    if min2 + 100 <= min3 then
        return choose, chooseis
    end
end
function requestEntrance(vector3, fr)
    if not fr or fr ~= "Temple Of Time" and fr ~= "Dismension" then
        args = {
            "requestEntrance",
            vector3
        }
        game.ReplicatedStorage.Remotes.CommF_:InvokeServer(unpack(args))
        oldcframe = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
        char = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(oldcframe.X, oldcframe.Y + 50, oldcframe.Z)
        task.wait(0.5)
    else
        pcall(
            function()
                game.ReplicatedStorage.Remotes.CommF_:InvokeServer(
                    "requestEntrance",
                    Vector3.new(28282.5703125, 14896.8505859375, 105.1042709350586)
                )
                if GetDistance(CFrame.new(28282.5703125, 14896.8505859375, 105.1042709350586)) > 10 then
                    return
                end
                game.Players.LocalPlayer.Character:MoveTo(
                    CFrame.new(
                        28390.7812,
                        14895.8574,
                        106.534714,
                        0.0683786646,
                        1.44424162e-08,
                        -0.997659445,
                        7.52342522e-10,
                        1,
                        1.45278642e-08,
                        0.997659445,
                        -1.74397752e-09,
                        0.0683786646
                    ).Position
                )
                AllNPCS = getnilinstances()
                for i, v in pairs(game:GetService("Workspace").NPCs:GetChildren()) do
                    table.insert(AllNPCS, v)
                end
                for i, v in pairs(AllNPCS) do
                    if v.Name == "Mysterious Force" then
                        TempleMysteriousNPC1 = v
                    end
                    if v.Name == "Mysterious Force3" then
                        TempleMysteriousNPC2 = v
                    end
                end
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
                    TempleMysteriousNPC2.HumanoidRootPart.CFrame
                wait(0.3)
                if
                    (TempleMysteriousNPC2.HumanoidRootPart.Position -
                        game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude < 15
                 then
                    game.ReplicatedStorage.Remotes.CommF_:InvokeServer("RaceV4Progress", "TeleportBack")
                end
                wait(0.75)
            end
        )
    end
end
function AntiLowHealth(NewY)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
        CFrame.new(
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.X,
        NewY,
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.Z
    )
    wait()
end
function GetMidPoint(MobName, b2)
    if MobName == "Ship Officer [Lv. 1325]" then
        return b2.CFrame
    end
    if 1 > 1 then
        return b2.CFrame
    end
    local totalpos
    allid = 0
    for i, v in pairs(game.workspace.Enemies:GetChildren()) do
        if
            v.Name == MobName and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 and v:FindFirstChild("HumanoidRootPart") and
                (b2 and GetDistance(v.HumanoidRootPart, b2) <= 475)
         then
            if not totalpos then
                totalpos = v.HumanoidRootPart.Position
            elseif totalpos then
                totalpos = totalpos + v.HumanoidRootPart.Position
            end
            allid = allid + 1
        end
    end
    if totalpos then
        return totalpos / allid
    end
end 
function TweenObject(TweenCFrame,obj,ts)
    if not ts then ts = 350 end
    local tween_s = game:service "TweenService"
    local info =
        TweenInfo.new(
        (TweenCFrame.Position -
            obj.Position).Magnitude /
            ts,
        Enum.EasingStyle.Linear
    )
    _G.TweenObject =
        tween_s:Create(
            obj,
        info,
        {CFrame = TweenCFrame}
    )
    _G.TweenObject:Play() 
end
function IsPlayerAlive(player)
    if not player then
        player = game.Players.LocalPlayer
    end

    -- Kiểm tra xem đối tượng player có tồn tại và là một người chơi hợp lệ không
    if not player or not player:IsA("Player") then
        return false -- Trả về false nếu không phải là người chơi
    end

    -- Kiểm tra trạng thái nhân vật của người chơi
    local character = player.Character or player:FindFirstChild('Character')
    if not character then
        return false -- Trả về false nếu không có nhân vật
    end

    -- Kiểm tra thanh máu của nhân vật (Humanoid)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid or humanoid.Health <= 0 then
        return false -- Trả về false nếu không có Humanoid hoặc máu bằng 0
    end

    -- Nếu tất cả các điều kiện trên đều thỏa mãn, người chơi còn sống
    return true 
end
function CheckPlayerAlive()
    local a2,b2 = pcall(function() return game:GetService("Players").LocalPlayer.Character.Humanoid.Health > 0 end)
    task.wait()
    if a2 then return b2 end 
end   

function sortSwordsByRarity(swords)
    table.sort(swords, function(a, b)
        return a.Rarity > b.Rarity
    end) 
    return swords[1]
end

function getNextSwordToFarm()
    local Swords = {}
    for _, itemData in pairs(_G.ServerData["Inventory Items"]) do 
        if itemData.Type == 'Sword' and itemData.Mastery < itemData.MasteryRequirements.X then 
            table.insert(Swords, itemData)  -- Chèn đúng vào bảng Swords
        end 
    end
    if #Swords > 0 then 
        local NNN = sortSwordsByRarity(Swords) 
        return NNN,NNN.MasteryRequirements.X
    end
    Swords = {}
    for _, itemData in pairs(game:GetService("ReplicatedStorage").Remotes["CommF_"]:InvokeServer("getInventory")) do 
        if itemData.Type == 'Sword' and itemData.Mastery < 600 then 
            table.insert(Swords, itemData)  -- Chèn đúng vào bảng Swords
        end 
    end
    if #Swords > 0 then 
        local NNN = sortSwordsByRarity(Swords) 
        return NNN,600
    end
    return nil,0
end  

function checkitem(sw)
            local a = game:GetService("Players").LocalPlayer.Backpack:FindFirstChild(sw)
            local b =  game.Players.LocalPlayer.Character:FindFirstChild(sw)
            if ( a and a.Name == sw)  then 
              
              return {Mastery = vcl(a , 0)} 
            end 
            
            if ( b and b.Name == sw)  then
              return {Mastery = vcl(b , 0)} 
            end 
            
            for k, v in pairs(inv) do
               if v.Name == sw then
                  return v
               end
            end
            return false
         end

 
         function checkitem2(sw)
            local a = game:GetService("Players").LocalPlayer.Backpack:FindFirstChild(sw)
            local b =  game.Players.LocalPlayer.Character:FindFirstChild(sw)
            if ( a and a.Name == sw)  then 
              
              return {Mastery = vcl(a , 0)} 
            end 
            
            if ( b and b.Name == sw)  then 
              return {Mastery = vcl(b , 0)} 
            end 
            
            return false
         end


function Buso()
               if (not (game.Players.LocalPlayer.Character:FindFirstChild("HasBuso"))) then
                  local rel = game.ReplicatedStorage

                  rel.Remotes.CommF_:InvokeServer("Buso")
               end
            end

function CheckDoubleQuest()

            local a = {}
            for r, v in pairs(Q) do
               for M, N in pairs(v) do
                  local U = N.LevelReq
                  for O, P in pairs(N.Task) do
                     if O == Mob1 then
                        for _, a0 in next, v do
                           if a0.LevelReq <= game.Players.LocalPlayer.Data.Level.Value and a0.Name ~= "Town Raid" then
                              for a1, a2 in next, a0.Task do
                                 if a2 > 1 then
                                    table.insert(a, a1)
                                 end
                              end
                           end
                        end
                     end
                  end
               end
            end
            return a 
         end
         local a3 = require(game.ReplicatedStorage:WaitForChild("GuideModule"))
         function CheckQuestData()
            for r, v in next, a3.Data do
               if r == "QuestData" then
                  return true
               end
            end
            return false
         end

         function CheckNameDoubleQuest()
            local a
            if CheckQuestData() then
               for r, v in next, a3.Data.QuestData.Task do
                  a = r
               end
            end
            return a
         end
         function CheckNameDoubleQuest2()
            local a
            local a4 = {}
            if CheckQuestData() then
               for r, v in next, a3.Data.QuestData.Task do
                  a = r
                  table.insert(a4, r)
               end
            end
            return a4
         end

         function CheckDoubleQuest2()
            checkq()
            local a5 = {}
            if
            game.Players.LocalPlayer.Data.Level.Value >= 10 and CheckQuestData() and
            CheckNameDoubleQuest() == Mob1 and
            #CheckNameDoubleQuest() > 2
            then
               for r, v in pairs(Q) do
                  for M, N in pairs(v) do
                     for O, P in pairs(N.Task) do
                        if tostring(O) == Mob1 then
                           for a6, a7 in next, v do
                              for a8, a9 in next, a7.Task do
                                 if a8 ~= Mob1 and a9 > 1 then
                                    if a7.LevelReq <= game.Players.LocalPlayer.Data.Level.Value then
                                       a5["Name"] = tostring(a8)
                                       a5["NameQuest"] = r
                                       a5["ID"] = a6
                                    else
                                       a5["Name"] = Mob1
                                       a5["NameQuest"] = Mob2
                                       a5["ID"] = Mob3
                                    end
                                    return a5
                                 end
                              end
                           end
                        end
                     end
                  end
               end
            else
               a5["Name"] = Mob1
               a5["NameQuest"] = Mob2
               a5["ID"] = Mob3
               return a5
            end
            a5["Name"] = Mob1
            a5["NameQuest"] = Mob2
            a5["ID"] = Mob3
            return a5
         end

function getsortedmon()
    local beo = game.Players.LocalPlayer
    local memay = beo.Character:WaitForChild"HumanoidRootPart"
    local chim = workspace.Enemies: GetChildren ()
    local bamaysuccac = {} 
    for i, v in pairs(chim) do 
      if v.Name ~= "PirateBasic" and v.Name ~= "PirateBrigade" and v:FindFirstChild"HumanoidRootPart" then 
        table.insert(bamaysuccac, v) 
       end
      end
    table.sort(bamaysuccac, function(aL, aM)
      
        return beo: DistanceFromCharacter(aL.HumanoidRootPart.Position) < beo: DistanceFromCharacter (aM.HumanoidRootPart.Position) 
    end)
   
   return bamaysuccac

-- return bamaysuccac or game.Workspace.Enemies:GetChildren()
end

function whatismyrace() 
  return game:GetService("Players").LocalPlayer.Data.Race.Value 
end 

         function MobLevel1OrMobLevel2()
            local aa = {}
            for r, v in pairs(getsortedmon()) do
               if
               not table.find(aa, v.Name) and v:IsA("Model") and v.Name ~= "PirateBasic" and
               not string.find(v.Name, "Brigade") and
               v:FindFirstChild("Humanoid") and
               v.Humanoid.Health > 0 and
               v:FindFirstChild("HumanoidRootPart")
               then
                  table.insert(aa, v.Name)
               end
            end
            for r, v in pairs(aa) do
               local ab = v
               
               v = tostring(v:gsub(" %pLv. %d+%p", ""))
               if tostring(v) == CheckNameDoubleQuest() then
                  return tostring(ab)
               end
            end
            return false
         end
         local ad = game.ReplicatedStorage.Remotes["CommF_"]
         raidlist = {}
           for i, v in pairs(require(game:GetService("ReplicatedStorage").Raids).advancedRaids) do 
             table.insert(raidlist, v) 
           end 
           for i, v in pairs(require(game:GetService("ReplicatedStorage").Raids).raids) do 
             table.insert(raidlist, v) 
           end
           

function GetQuest()
            if game.Players.LocalPlayer.PlayerGui.Main:FindFirstChild("Quest").Visible then
               return
            end
