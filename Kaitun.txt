if not game:IsLoaded() then repeat game.Loaded:Wait() until game:IsLoaded() end





function Buso()
               if (not (game.Players.LocalPlayer.Character:FindFirstChild("HasBuso"))) then
                  local rel = game.ReplicatedStorage

                  rel.Remotes.CommF_:InvokeServer("Buso")
               end
            end

function CheckDoubleQuest()

            local a = {}
            for r, v in pairs(Q) do
               for M, N in pairs(v) do
                  local U = N.LevelReq
                  for O, P in pairs(N.Task) do
                     if O == Mob1 then
                        for _, a0 in next, v do
                           if a0.LevelReq <= game.Players.LocalPlayer.Data.Level.Value and a0.Name ~= "Town Raid" then
                              for a1, a2 in next, a0.Task do
                                 if a2 > 1 then
                                    table.insert(a, a1)
                                 end
                              end
                           end
                        end
                     end
                  end
               end
            end
            return a 
         end
         local a3 = require(game.ReplicatedStorage:WaitForChild("GuideModule"))
         function CheckQuestData()
            for r, v in next, a3.Data do
               if r == "QuestData" then
                  return true
               end
            end
            return false
         end

         function CheckNameDoubleQuest()
            local a
            if CheckQuestData() then
               for r, v in next, a3.Data.QuestData.Task do
                  a = r
               end
            end
            return a
         end
         function CheckNameDoubleQuest2()
            local a
            local a4 = {}
            if CheckQuestData() then
               for r, v in next, a3.Data.QuestData.Task do
                  a = r
                  table.insert(a4, r)
               end
            end
            return a4
         end

         function CheckDoubleQuest2()
            checkq()
            local a5 = {}
            if
            game.Players.LocalPlayer.Data.Level.Value >= 10 and CheckQuestData() and
            CheckNameDoubleQuest() == Mob1 and
            #CheckNameDoubleQuest() > 2
            then
               for r, v in pairs(Q) do
                  for M, N in pairs(v) do
                     for O, P in pairs(N.Task) do
                        if tostring(O) == Mob1 then
                           for a6, a7 in next, v do
                              for a8, a9 in next, a7.Task do
                                 if a8 ~= Mob1 and a9 > 1 then
                                    if a7.LevelReq <= game.Players.LocalPlayer.Data.Level.Value then
                                       a5["Name"] = tostring(a8)
                                       a5["NameQuest"] = r
                                       a5["ID"] = a6
                                    else
                                       a5["Name"] = Mob1
                                       a5["NameQuest"] = Mob2
                                       a5["ID"] = Mob3
                                    end
                                    return a5
                                 end
                              end
                           end
                        end
                     end
                  end
               end
            else
               a5["Name"] = Mob1
               a5["NameQuest"] = Mob2
               a5["ID"] = Mob3
               return a5
            end
            a5["Name"] = Mob1
            a5["NameQuest"] = Mob2
            a5["ID"] = Mob3
            return a5
         end

function getsortedmon()
    local beo = game.Players.LocalPlayer
    local memay = beo.Character:WaitForChild"HumanoidRootPart"
    local chim = workspace.Enemies: GetChildren ()
    local bamaysuccac = {} 
    for i, v in pairs(chim) do 
      if v.Name ~= "PirateBasic" and v.Name ~= "PirateBrigade" and v:FindFirstChild"HumanoidRootPart" then 
        table.insert(bamaysuccac, v) 
       end
      end
    table.sort(bamaysuccac, function(aL, aM)
      
        return beo: DistanceFromCharacter(aL.HumanoidRootPart.Position) < beo: DistanceFromCharacter (aM.HumanoidRootPart.Position) 
    end)
   
   return bamaysuccac

-- return bamaysuccac or game.Workspace.Enemies:GetChildren()
end

function whatismyrace() 
  return game:GetService("Players").LocalPlayer.Data.Race.Value 
end 

         function MobLevel1OrMobLevel2()
            local aa = {}
            for r, v in pairs(getsortedmon()) do
               if
               not table.find(aa, v.Name) and v:IsA("Model") and v.Name ~= "PirateBasic" and
               not string.find(v.Name, "Brigade") and
               v:FindFirstChild("Humanoid") and
               v.Humanoid.Health > 0 and
               v:FindFirstChild("HumanoidRootPart")
               then
                  table.insert(aa, v.Name)
               end
            end
            for r, v in pairs(aa) do
               local ab = v
               
               v = tostring(v:gsub(" %pLv. %d+%p", ""))
               if tostring(v) == CheckNameDoubleQuest() then
                  return tostring(ab)
               end
            end
            return false
         end
         local ad = game.ReplicatedStorage.Remotes["CommF_"]
         raidlist = {}
           for i, v in pairs(require(game:GetService("ReplicatedStorage").Raids).advancedRaids) do 
             table.insert(raidlist, v) 
           end 
           for i, v in pairs(require(game:GetService("ReplicatedStorage").Raids).raids) do 
             table.insert(raidlist, v) 
           end
           

 unction checkq()
            local T = game.Players.LocalPlayer.Data.Level.Value
            local min = 0
            if T >= 1450 and game.PlaceId == 4442272183 then
               Mob1 = "Water Fighter"
               Mob2 = "ForgottenQuest"
               Mob3 = 2
            elseif  T >= 700 and game.PlaceId == 2753915549 then
               Mob1 = "Galley Captain"
               Mob2 = "FountainQuest"
               Mob3 = 2
            elseif  T >= 1350 and not checkitem("Rengoku") and c().Process["Force Rengoku"] then
               local shitbozo = math.random(1,2)
               Mob2 = "FrostQuest"
               if shitbozo == 1 then
                  Mob1 = "Snow Lurker"
                  Mob3 = 2
               else
                  Mob1 = "Arctic Warrior"
                  Mob3 = 1
               end
            elseif T >= 2050 then
                  Mob1 = "Posessed Mummy"
                  Mob2 = "HauntedQuest2"
                  Mob3 = 2
               else
                  for r, v in pairs(Q) do
                     for M, N in pairs(v) do
                        local U = N.LevelReq
                        for O, P in pairs(N.Task) do
                           if T >= U and U >= min and N.Task[O] > 1 and not table.find(R, tostring(r)) then
                              min = U
                              Mob1 = tostring(O)
                              Mob2 = r
                              Mob3 = M
                           end
                        end
                     end
                  end
               end
            end
            function spamandwait(wt) 
              taocanpasue = true 
              for i, v in pairs(wt) do 
                down(v) 
                repeat wait(.1) until not game.Players.LocalPlayer.Character.Busy.Value 
              end 
              taocanpasue = false
            end 


function GetQuest()
            if game.Players.LocalPlayer.PlayerGui.Main:FindFirstChild("Quest").Visible then
               return
            end
